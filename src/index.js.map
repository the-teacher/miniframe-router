{
  "version": 3,
  "sources": ["../src.ts/index.ts", "../src.ts/base.ts", "../src.ts/utils.ts"],
  "sourcesContent": ["import { Router } from \"express\";\n\nimport {\n  getRouter,\n  getRouterCotrollersPath,\n  setRouterCotrollersPath,\n  resetRouter,\n  routeScope,\n} from \"./base\";\n\nimport { parseControllerString, loadController } from \"./utils\";\n\nexport const root = (controllerAction: string) => {\n  const { controller, action } =\n    typeof controllerAction === \"string\"\n      ? parseControllerString(controllerAction)\n      : controllerAction;\n\n  getRouter().get(\"/\", loadController(controller, action));\n};\n\nexport const get = (urlPath: string, controllerAction: string) => {\n  const { controller, action } =\n    typeof controllerAction === \"string\"\n      ? parseControllerString(controllerAction)\n      : controllerAction;\n\n  const normalizedPath = urlPath.startsWith(\"/\") ? urlPath.slice(1) : urlPath;\n  getRouter().get(`/${normalizedPath}`, loadController(controller, action));\n};\n\nexport const post = (urlPath: string, controllerAction: string) => {\n  const { controller, action } =\n    typeof controllerAction === \"string\"\n      ? parseControllerString(controllerAction)\n      : controllerAction;\n\n  const normalizedPath = urlPath.startsWith(\"/\") ? urlPath.slice(1) : urlPath;\n  getRouter().post(`/${normalizedPath}`, loadController(controller, action));\n};\n\nexport {\n  getRouter,\n  getRouterCotrollersPath,\n  setRouterCotrollersPath,\n  resetRouter,\n  routeScope,\n};\n", "import { Router } from \"express\";\n\nconst DEFAULT_CONTROLLERS_PATH = \"src/controllers\";\n\nlet globalRouter: Router | null = null;\nlet currentScope: string | null = null;\nlet controllersPath: string = DEFAULT_CONTROLLERS_PATH;\n\nexport const getRouter = () => {\n  if (!globalRouter) {\n    globalRouter = Router();\n  }\n\n  return globalRouter;\n};\n\nexport const resetRouter = () => {\n  globalRouter = null;\n  currentScope = null;\n  controllersPath = DEFAULT_CONTROLLERS_PATH;\n};\n\nexport const setRouterCotrollersPath = (path: string) =>\n  (controllersPath = path);\n\nexport const getRouterCotrollersPath = () => controllersPath;\n\n// Store current routing scope\nexport const setRouterScope = (scope: string | null) => {\n  currentScope = scope;\n};\n\n// Get current routing scope\nexport const getRouterScope = () => currentScope;\n\nexport const routeScope = (\n  scope: string,\n  routesDefinitionCallback: () => void\n) => {\n  const router = Router();\n  const originalRouter = globalRouter;\n\n  // Temporarily replace global router with a new one\n  globalRouter = router;\n\n  // Set current scope\n  setRouterScope(scope);\n\n  // Execute callback that will add routes to the new router\n  routesDefinitionCallback();\n\n  // Restore original router and reset scope\n  globalRouter = originalRouter;\n  setRouterScope(null);\n\n  // Mount scoped router to the main router with scope prefix\n  getRouter().use(`/${scope}`, router);\n};\n", "import path from \"path\";\nimport { getRouterCotrollersPath, getRouterScope } from \"./base\";\n\nconst getProjectRoot = () => {\n  let currentDir = process.cwd();\n  return currentDir;\n};\n\nexport const parseControllerString = (controllerActionString: string) => {\n  const [controller, action] = controllerActionString.split(\"#\");\n  if (!controller || !action) {\n    throw new Error(\n      `Invalid format for controller action: ${controllerActionString}. Expected format is 'controller#action'.`\n    );\n  }\n  return { controller, action };\n};\n\nexport const requireController = (controllerPath: string) =>\n  require(controllerPath);\n\nexport const buildControllerPath = (controllerName: string) => {\n  const scope = getRouterScope();\n  const projectRoot = getProjectRoot();\n  const controllersBasePath = path.resolve(\n    projectRoot,\n    getRouterCotrollersPath()\n  );\n\n  if (controllerName.includes(\"/\")) {\n    return path.join(controllersBasePath, `${controllerName}Controller`);\n  }\n\n  if (scope) {\n    return path.join(controllersBasePath, scope, `${controllerName}Controller`);\n  }\n\n  return path.join(controllersBasePath, `${controllerName}Controller`);\n};\n\nexport const loadController = (controllerName: string, action: string) => {\n  const controllerPath = buildControllerPath(controllerName);\n  const controller = requireController(controllerPath);\n\n  if (controller[action]) {\n    return controller[action];\n  } else {\n    throw new Error(\n      `Action ${action} not found in controller ${controllerName}`\n    );\n  }\n};\n"],
  "mappings": "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",
  "names": ["path", "path"]
}
